version: '3.4'
services:
  torproxy:
    image: dockage-tor-privoxy
#    environment:
#    ports:
#      - target: 9050
#        published: 9050
#        protocol: tcp
#        mode: host
    networks:
      - external
      - tornet
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        delay: 60s
        window: 120s

  jackett:
    image: linuxserver/jackett
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - jackett_config:/config
      - data:/data
    ports:
      - target: 9117
        published: ${JACKETTPORT}
        protocol: tcp
        mode: host
    networks:
      - external
      - tornet
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9117"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        delay: 60s
        window: 120s

  radarr:
    image: linuxserver/radarr
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - radarr_config:/config
      - data:/data
    ports:
      - target: 7878
        published: ${RADARRPORT}
        protocol: tcp
        mode: host
    networks:
      - external
      - tornet
      - internal
      - traefik-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7878"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        delay: 60s
        window: 120s
      labels:
        traefik.enable: "true"
        traefik.frontend.rule: "Host:radarr.${HOSTDOMAIN}"
        traefik.port: 7878
        traefik.docker.network: traefik-net
        traefik.frontend.headers.STSSeconds: 63072000
        traefik.frontend.headers.STSIncludeSubdomains: "true"
        traefik.frontend.headers.STSPreload: "true"

  sonarr:
    image: linuxserver/sonarr
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - sonarr_config:/config
      - data:/data
    ports:
      - target: 8989
        published: ${SONARRPORT}
        protocol: tcp
        mode: host
    networks:
      - external
      - tornet
      - traefik-net
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        delay: 60s
        window: 120s
      labels:
        traefik.enable: "true"
        traefik.frontend.rule: "Host:sonarr.${HOSTDOMAIN}"
        traefik.port: 8989
        traefik.docker.network: traefik-net
        traefik.frontend.headers.STSSeconds: 63072000
        traefik.frontend.headers.STSIncludeSubdomains: "true"
        traefik.frontend.headers.STSPreload: "true"

  lidarr:
    image: linuxserver/lidarr
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - lidarr_config:/config
      - data:/data
      - /dev/null:/music
    ports:
      - target: 8686
        published: ${LIDARRPORT}
        protocol: tcp
        mode: host
    networks:
      - external
      - tornet
      - traefik-net
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8686"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        delay: 60s
        window: 120s
      labels:
        traefik.enable: "true"
        traefik.frontend.rule: "Host:lidarr.${HOSTDOMAIN}"
        traefik.port: 8686
        traefik.docker.network: traefik-net
        traefik.frontend.headers.STSSeconds: 63072000
        traefik.frontend.headers.STSIncludeSubdomains: "true"
        traefik.frontend.headers.STSPreload: "true"

  bazarr:
    image: linuxserver/bazarr
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - bazarr_config:/config
      - data:/data
    ports:
      - target: 6767
        published: ${BAZARRPORT}
        protocol: tcp
        mode: host
    networks:
      - external # tymczasowo do momentku kiedy nie naprawia sonarr-a
      - tornet
      - traefik-net
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6767"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
      labels:
        traefik.enable: "true"
        traefik.frontend.rule: "Host:bazarr.${HOSTDOMAIN}"
        traefik.port: 6767
        traefik.docker.network: traefik-net
        traefik.frontend.headers.STSSeconds: 63072000
        traefik.frontend.headers.STSIncludeSubdomains: "true"
        traefik.frontend.headers.STSPreload: "true"

  deluge:
    image: linuxserver/deluge
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - DELUGE_LOGLEVEL=info #optional
#    network_mode: host
    ports:
      - target: 58846
        published: ${DELUGEDAEMONPORT}
        protocol: tcp
        mode: host
      - target: 8112
        published: ${DELUGEWEBUIPORT}
        protocol: tcp
        mode: host
      - target: ${DELUGEINCOMINGPORT}
        published:  ${DELUGEINCOMINGPORT}
        protocol: tcp
        mode: host
      - target: ${DELUGEINCOMINGPORT}
        published: ${DELUGEINCOMINGPORT}
        protocol: udp
        mode: host
    networks:
      - external
      - internal
    volumes:
      - deluge_config:/config
      - data:/data
      - /dev/null:/downloads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8112"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        delay: 60s
        window: 120s

  smb:
    image: dperson-samba:armhf
    environment:
      - TZ=${TZ}
      - USERID=${PUID}
      - GROUPID=${PGID}
    ports:
      - target: 445
        published: ${SMBPORT}
        protocol: tcp
        mode: host
    networks:
      - external
    volumes:
      - data:/data
      - jackett_config:/configs/jackett
      - radarr_config:/configs/radarr
      - sonarr_config:/configs/sonarr
      - deluge_config:/configs/deluge
      - bazarr_config:/configs/bazarr
      - lidarr_config:/configs/lidarr
      - smb_lib:/var/lib/samba
      - smb_run:/run/samba
      - smb_etc:/etc
      - smb_cache:/var/cache/samba
      - smb_log:/var/log/samba
    command: '-u "${SMBADMIN};${SMBADMINPASS}" -u "${SMBUSER};${SMBUSERPASS}" -u "${SMBUSERMEDIA};${SMBUSERMEDIAPASS}" -s "configs;/configs;yes;no;no;${SMBADMIN}" -s "tv shows;/data/tv;yes;no;no;${SMBADMIN},${SMBUSER},${SMBUSERMEDIA}"  -s "audio;/data/audio;yes;no;no;${SMBADMIN},${SMBUSER},${SMBUSERMEDIA}" -s "movies;/data/movies;yes;no;no;${SMBADMIN},${SMBUSER},${SMBUSERMEDIA}" -s "downloads;/data/downloads;yes;no;no;${SMBADMIN},${SMBUSER}"' #Note, you should only provide one command statement
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        delay: 60s
        window: 120s

volumes:
  data:
  jackett_config:
  radarr_config:
  sonarr_config:
  deluge_config:
  bazarr_config:
  lidarr_config:
  smb_lib:
  smb_run:
  smb_etc:
  smb_cache:
  smb_log:

networks:
  tornet:
    driver: overlay
    internal: true
  external:
  internal:
    driver: overlay
    internal: true
  traefik-net:
    external: true
    internal: true

### Environment variables
# HOSTDOMAIN  example.net
# JACKETTPORT 9117
# DELUGEINCOMINGPORT  62054
# DELUGEDAEMONPORT  58846
# DELUGEWEBUIPORT  8112
# RADARRPORT  7878
# SONARRPORT  8989
# BAZARRPORT  6767
# LIDARRPORT  8686
# SMBPORT 445
# SMBADMIN  admin
# SMBADMINPASS  adminPass
# SMBUSER user
# SMBUSERPASS userPass
# SMBUSERMEDIA media
# SMBUSERMEDIAPASS mediaPass
# PUID  1000
# PGID  1000
# TZ  Europe/Warsaw
